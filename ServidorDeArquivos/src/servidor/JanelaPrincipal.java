/**
 * Classe da JanelaPrincipal Principal do Servidor
 * @author Jorge Augusto C. dos Reis
 * Descrição:
 * Esta classe modela a JanelaPrincipal do Servidor Principal
 */

package servidor;

import base.InfoDeArquivo;
import base.InfoServidorEscravo;
import java.io.File;
import java.io.FileInputStream;
import java.io.ObjectInputStream;
import java.util.ArrayList;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

public class JanelaPrincipal extends javax.swing.JFrame {

    /**
     * Creates new form JanelaPrincipal
     */
    public JanelaPrincipal() {

        initComponents();

        // Coloca janela no centro da tela
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPaneArquivos = new javax.swing.JScrollPane();
        jTableArquivos = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jScrollPaneEscravos = new javax.swing.JScrollPane();
        jTableEscravos = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jSeparator = new javax.swing.JSeparator();
        jLabelBarraStatus = new javax.swing.JLabel();
        jScrollPaneConexoes = new javax.swing.JScrollPane();
        jTableConexoes = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        jMenuBar = new javax.swing.JMenuBar();
        jMenuArquivo = new javax.swing.JMenu();
        jMenuItemCadServEscravo = new javax.swing.JMenuItem();
        jMenuItemSair = new javax.swing.JMenuItem();
        jMenuAjuda = new javax.swing.JMenu();
        jMenuItemSobre = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Servidor Principal - Sistema Servidor de Arquivos");
        setBounds(new java.awt.Rectangle(0, 0, 0, 0));
        setName("framePrincipal");
        setResizable(false);

        jTableArquivos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nome do Arquivo", "Local", "Tamanho"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableArquivos.getTableHeader().setReorderingAllowed(false);
        jScrollPaneArquivos.setViewportView(jTableArquivos);
        jTableArquivos.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jTableArquivos.getColumnModel().getColumn(1).setMinWidth(80);
        jTableArquivos.getColumnModel().getColumn(1).setPreferredWidth(80);
        jTableArquivos.getColumnModel().getColumn(1).setMaxWidth(80);
        jTableArquivos.getColumnModel().getColumn(2).setMinWidth(120);
        jTableArquivos.getColumnModel().getColumn(2).setPreferredWidth(120);
        jTableArquivos.getColumnModel().getColumn(2).setMaxWidth(120);

        jLabel1.setText("Lista de Arquivos Disponíveis");

        jTableEscravos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nome", "IP", "Porta", "Situação"
            }
        ));
        jTableEscravos.setEnabled(false);
        jScrollPaneEscravos.setViewportView(jTableEscravos);
        jTableEscravos.getColumnModel().getColumn(1).setMinWidth(100);
        jTableEscravos.getColumnModel().getColumn(1).setMaxWidth(100);
        jTableEscravos.getColumnModel().getColumn(2).setMinWidth(60);
        jTableEscravos.getColumnModel().getColumn(2).setMaxWidth(60);
        jTableEscravos.getColumnModel().getColumn(3).setMinWidth(100);
        jTableEscravos.getColumnModel().getColumn(3).setMaxWidth(100);

        jLabel2.setText("Lista de Escravos");

        jLabelBarraStatus.setText("Carregando...");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelBarraStatus, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelBarraStatus)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTableConexoes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Cliente", "Estado", "Arquivo", "%"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableConexoes.getTableHeader().setReorderingAllowed(false);
        jScrollPaneConexoes.setViewportView(jTableConexoes);
        jTableConexoes.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jTableConexoes.getColumnModel().getColumn(0).setMinWidth(50);
        jTableConexoes.getColumnModel().getColumn(0).setPreferredWidth(50);
        jTableConexoes.getColumnModel().getColumn(0).setMaxWidth(50);
        jTableConexoes.getColumnModel().getColumn(1).setMinWidth(80);
        jTableConexoes.getColumnModel().getColumn(1).setPreferredWidth(80);
        jTableConexoes.getColumnModel().getColumn(1).setMaxWidth(80);
        jTableConexoes.getColumnModel().getColumn(3).setMinWidth(50);
        jTableConexoes.getColumnModel().getColumn(3).setPreferredWidth(50);
        jTableConexoes.getColumnModel().getColumn(3).setMaxWidth(50);

        jLabel3.setText("Lista de Clientes Conectados");

        jMenuArquivo.setText("Arquivo");

        jMenuItemCadServEscravo.setText("Cadastrar Servidor Escravo");
        jMenuItemCadServEscravo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemCadServEscravoActionPerformed(evt);
            }
        });
        jMenuArquivo.add(jMenuItemCadServEscravo);

        jMenuItemSair.setText("Sair");
        jMenuItemSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemSairActionPerformed(evt);
            }
        });
        jMenuArquivo.add(jMenuItemSair);

        jMenuBar.add(jMenuArquivo);

        jMenuAjuda.setText("Ajuda");

        jMenuItemSobre.setText("Sobre");
        jMenuItemSobre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemSobreActionPerformed(evt);
            }
        });
        jMenuAjuda.add(jMenuItemSobre);

        jMenuBar.add(jMenuAjuda);

        setJMenuBar(jMenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPaneEscravos)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPaneArquivos, javax.swing.GroupLayout.PREFERRED_SIZE, 420, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(jScrollPaneConexoes, javax.swing.GroupLayout.DEFAULT_SIZE, 350, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPaneArquivos, javax.swing.GroupLayout.DEFAULT_SIZE, 338, Short.MAX_VALUE)
                    .addComponent(jScrollPaneConexoes, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPaneEscravos, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 21, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItemSobreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemSobreActionPerformed
        exibirSobre();
    }//GEN-LAST:event_jMenuItemSobreActionPerformed

    private void jMenuItemSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemSairActionPerformed
        fecharJanela();
    }//GEN-LAST:event_jMenuItemSairActionPerformed

    private void jMenuItemCadServEscravoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemCadServEscravoActionPerformed
        abrirJanCadServEscravo();
    }//GEN-LAST:event_jMenuItemCadServEscravoActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JanelaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JanelaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JanelaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JanelaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                JanelaPrincipal janela = new JanelaPrincipal();

                janela.setVisible(true);

                /**
                 * Cria a nova GerenteConexao que irá responder as solicitações
                 * a partir dela cria uma nova thread
                 * isso poderia ficar em uma só linha como em:
                 * new Thread(new GerenteConexao(janela.jLabelBarraStatus)).start();
                 * Mas para que possamos referencia tando a instância de GerenteConexao
                 * como de Thread, resolvi colocar desta forma
                 */
                janela.gerenteConexao   = new GerenteConexao(janela);
                janela.threadDoServidor = new Thread(janela.gerenteConexao);
                janela.threadDoServidor.start();

                // Atualiza, servidores e arquivos...
                janela.carregarListaServidoresEscravos();
                janela.atualizaTabelaArquivos();
            }
        });
    }

    /* Aqui inicia a implementaçãos dos meus métodos, deste ponto em diante
     * não existe código que não tenha sido feito por mim.
     */

    // Método que exibe a mensagem do Sobre
    private void exibirSobre() {
        JOptionPane.showMessageDialog(rootPane,
        "<html><b><font size='5'>Sistema Servidor de Arquivos</font></b><br>"                   +
        "<b><font size='3'>IESAM - Institudo de Estudos Superiores da Amazônia</font></b><br>"  +
        "<b><font size='3'>Engenharia de Computação</font></b><br><br>"                         +
        "Programador: <b><font color='red'>Jorge Augusto C. dos Reis</font></b><br>"            +
        "E-mail: <b><font color='blue'>engjorgeaugusto@gmail.com</font></b><br>",
        "Sobre", JOptionPane.INFORMATION_MESSAGE);

        // "E-mail: <a href='mailto:engjorgeaugusto@hotmail.com'>engjorgeaugusto@hotmail.com</a></html>",
    }

    // Este método fecha o programa
    private void fecharJanela() {
        dispose();
    }

    // Este método abria a janela de cadastro de servidores escravos
    private void abrirJanCadServEscravo() {
        janCadServidorEscravo = new JanelaCadServEscravo(this, true);

        // coloca cadastro de servidores escravos no centro desta tela...
        janCadServidorEscravo.setLocationRelativeTo(this);
        janCadServidorEscravo.setVisible(true);
    }

    // Este método carrega a lista de servidores escravos do arquivos em disco
    private void carregarListaServidoresEscravos() {
        try {
            FileInputStream        arquivo     = new FileInputStream("ListaDeServidoresEscravos.txt");
            ObjectInputStream      leitor      = new ObjectInputStream(arquivo);

            listaServEscravos = (ArrayList<InfoServidorEscravo>) leitor.readObject();
        }
        catch(Exception ex) {
            JOptionPane.showConfirmDialog(null, ex.getMessage(),
                                         "Erro ao ler lista",
                                         JOptionPane.ERROR_MESSAGE);
        }
    }

    // Escreve mensagem na barra de status
    public void escreveNaBarraStatus(String mensagens) {
        jLabelBarraStatus.setText(mensagens);
    }

    /**
     * Atualiza a listagem dos arquivos, este método é synchronized para evitar
     * erros de sincronização
     */
    private void  atualizaListaDeArquivos() {
        for(InfoServidorEscravo servEscravo : listaServEscravos) {
            solicitarListaDeArquivos(servEscravo);
        }
    }

    /**
    * Solicitar listagem dos arquivos
    * Este método vai solicitar aos vários servidores escravos que informem
    * a listagem dos vários arquivos que eles tem disponíveis, ele será chamaod de dentro do
    * do método solicitarArquivos() ai é cima, para cada uma dos vários servidores
    * constantes na lista de servidores escravos, no momento ele e lista os arquivos
    * existentes na pasta: ArquivosDistribuídos, mais isso vai mudar, para que
    * lista os arquivos existentes no servidores escravos
    */
    private void solicitarListaDeArquivos(InfoServidorEscravo servEscravo) {
        jLabelBarraStatus.setText("Atualizando listagem de arquivos, aguarde...");
        try {
            File    pasta       = new File("ArquivosDistribuidos");
            // para cada arquivo existente na pasta, cria um item no ArrayList

            // Isto deve sair daqui depois quando estiver comunicando com os vários
            // servidores escravos...
            listaDeArquivos.clear();
            for(File arquivo : pasta.listFiles()) {
                if(arquivo.isFile()) {
                    InfoDeArquivo infoArquivo = new InfoDeArquivo(arquivo.getName(), servEscravo, arquivo.length());
                    listaDeArquivos.add(infoArquivo);
                }
            }

            jLabelBarraStatus.setText("Total de Arquivos Lidos: " + listaDeArquivos.size());
        }
        catch(Exception ex) {
            jLabelBarraStatus.setText("Erro ao solicitar listagem de arquivos: " + ex.getMessage());
        }
    }

    // Este método preenche a JTable com os dados dos arquivos...
    // Talvez fique melhor se este método for sincronizado também...
    // Ainda estou pensando sobre isso, aguardando testes...
    private void atualizaTabelaArquivos() {
        atualizaListaDeArquivos();

        DefaultTableModel modelo = (DefaultTableModel) jTableArquivos.getModel();
        modelo.setRowCount(0);

        for(InfoDeArquivo arquivo : listaDeArquivos) {
            modelo.addRow(arquivo.getArray());
        }

        // Adiciona linhas a tabela...
        jLabelBarraStatus.setText("Total de Arquivos: " + listaDeArquivos.size());
    }

    // Este método atualiza a tabela de conexões...
    public void atualizaTabelaClientes() {
        DefaultTableModel modelo = (DefaultTableModel) jTableConexoes.getModel();
        modelo.setRowCount(0);

        for(InfoCliente cliente : listaDeClientes) {
            modelo.addRow(cliente.getArray());
        }
    }

    /**
     * Retorna a lista de arquivos para ser enviada aos clientes através das conexões
     */
    public ArrayList<InfoDeArquivo> getListaDeArquivos() {
        return listaDeArquivos;
    }

    /**
     * Retorna a lista de conexões, está sendo usada assim para permitir
     * as mensagens em broadcast, (para todos os clientes)
     */
    public ArrayList<InfoCliente> getListaDeClientes() {
        return listaDeClientes;
    }

    // Retorna um novo ID de Conexão...
    public static int getNovoIdCliente() {
        return idCliente++;
    }

    /* Declaração das minhas varíaveis
     *
     */
    private Thread                          threadDoServidor;
    private GerenteConexao                  gerenteConexao;
    private JanelaCadServEscravo            janCadServidorEscravo;      // referência a janela de cadastro de escravos!
    private ArrayList<InfoServidorEscravo>  listaServEscravos   = new ArrayList<InfoServidorEscravo>();
    private ArrayList<InfoDeArquivo>        listaDeArquivos     = new ArrayList<InfoDeArquivo>();
    private ArrayList<InfoCliente>          listaDeClientes     = new ArrayList<InfoCliente>();
    private static int                      idCliente           = 1;

    // Fim das Minhas Declarações

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabelBarraStatus;
    private javax.swing.JMenu jMenuAjuda;
    private javax.swing.JMenu jMenuArquivo;
    private javax.swing.JMenuBar jMenuBar;
    private javax.swing.JMenuItem jMenuItemCadServEscravo;
    private javax.swing.JMenuItem jMenuItemSair;
    private javax.swing.JMenuItem jMenuItemSobre;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPaneArquivos;
    private javax.swing.JScrollPane jScrollPaneConexoes;
    private javax.swing.JScrollPane jScrollPaneEscravos;
    private javax.swing.JSeparator jSeparator;
    private javax.swing.JTable jTableArquivos;
    private javax.swing.JTable jTableConexoes;
    private javax.swing.JTable jTableEscravos;
    // End of variables declaration//GEN-END:variables
}
