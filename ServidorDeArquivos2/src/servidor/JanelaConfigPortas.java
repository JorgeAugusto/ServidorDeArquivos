/**
 * Classe que modela a GUI da Janela de Configuração de Conexão com o Servidor
 * @author: Jorge Augusto C. dos Reis
 * @data..: 18/03/2013 às 04:34
 * @Descrição:
 * Esta classe modela a GUI da Janela de configuração da conexão com o servidor
 * basicamente ela carrega e salva as informações ta JTable em um arquivo,
 * usando os métodos da classe InfoServidor
 */

package servidor;

import base.EstadoSistema;
import base.InfoServidor;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

public class JanelaConfigPortas extends javax.swing.JDialog {

    /**
     * Creates new form JanelaCadServEscravo
     */
    public JanelaConfigPortas(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();

        // Coloca janela no centro da tela
        setLocationRelativeTo(null);
        janelaPai = (JanelaServidor) parent;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButtonEditar = new javax.swing.JButton();
        jButtonFechar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableConfigPortas = new javax.swing.JTable();
        jButtonSalvar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Portas de Escuta: Para Clientes e Servidores Escravos");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                windowOpenedActionPerformed(evt);
            }
        });

        jButtonEditar.setText("Editar");
        jButtonEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEditarActionPerformed(evt);
            }
        });

        jButtonFechar.setText("Fechar");
        jButtonFechar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonFecharActionPerformed(evt);
            }
        });

        jTableConfigPortas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Conexões", "Porta"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableConfigPortas.setColumnSelectionAllowed(true);
        jTableConfigPortas.setEnabled(false);
        jTableConfigPortas.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(jTableConfigPortas);
        jTableConfigPortas.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jTableConfigPortas.getColumnModel().getColumn(0).setMinWidth(150);
        jTableConfigPortas.getColumnModel().getColumn(0).setPreferredWidth(150);
        jTableConfigPortas.getColumnModel().getColumn(0).setMaxWidth(60150);

        jButtonSalvar.setText("Salvar");
        jButtonSalvar.setEnabled(false);
        jButtonSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSalvarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jButtonSalvar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonEditar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonFechar, javax.swing.GroupLayout.DEFAULT_SIZE, 93, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButtonEditar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonSalvar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonFechar))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonFecharActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonFecharActionPerformed
        fecharJanela();
    }//GEN-LAST:event_jButtonFecharActionPerformed

    private void jButtonSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSalvarActionPerformed
        salvarConfigPortas();
    }//GEN-LAST:event_jButtonSalvarActionPerformed

    private void windowOpenedActionPerformed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_windowOpenedActionPerformed
        atualizarTabelaConfigPortas();
    }//GEN-LAST:event_windowOpenedActionPerformed

    private void jButtonEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEditarActionPerformed
        habilitarEdicao();
    }//GEN-LAST:event_jButtonEditarActionPerformed

    /* Aqui inicia a implementaçãos dos meus métodos, deste ponto em diante
     * não existe código que não tenha sido feito por mim.
     */

    // Este método fecha a janela de cadatro de servidores escravos
    private void fecharJanela() {
        janelaPai.adicionarHistorico("Fechando janela de configuração de portas", EstadoSistema.OK);
        dispose();
    }

    /**
     * Carrega informações de conexão com o servidor principal, apartir do arquivo
     * caso o arquivo de configuração não exista, cria o mesmo e carrefa
     */
    private void atualizarTabelaConfigPortas() {
        ArrayList<InfoServidor> infoPortas = janelaPai.getServidor().getInfoPortas();
        DefaultTableModel   model = (DefaultTableModel) jTableConfigPortas.getModel();

        model.setRowCount(0);

        for(InfoServidor info : infoPortas) {
            model.addRow(new String[]{info.getNome(),
                                      Integer.toString(info.getPorta())});
        }
    }


    /**
     * Este método salva as alterações feitas no arquivo de configuração de
     * conexão com o servidor
     */
    private void salvarConfigPortas() {
        DefaultTableModel   model = (DefaultTableModel) jTableConfigPortas.getModel();
        List linhas = (List) model.getDataVector();

        try {
            ArrayList<InfoServidor> infoPortas = new ArrayList<InfoServidor>();

            for(Object linha : linhas) {
                infoPortas.add(new InfoServidor(
                                    ((List)linha).get(0).toString(),
                                    "-",
                                    Integer.parseInt(((List)linha).get(1).toString())
                        ));
            }

            janelaPai.getServidor().setInfoPortas(infoPortas);
            InfoServidor.salvarEmArquivo(janelaPai.getServidor().getInfoPortas(), Servidor.ARQ_CONFIG_PORTAS);
        }
        catch(Exception ex) {
            JOptionPane.showMessageDialog(rootPane,
                    "Erro ao salvar informações de configuração de Portas",
                    "Erro ao Salvar Portas", JOptionPane.ERROR_MESSAGE);

            janelaPai.adicionarHistorico("Salvando configuração de portas", EstadoSistema.ERRO);
        }

        janelaPai.adicionarHistorico("Salvando configuração de portas", EstadoSistema.OK);

        // Troca o estado do botão de edição e recarrega pra ter certeza que foi salvo
        habilitarEdicao();
    }

    /**
     * Este método habilida edição da tabela
     */
    private void habilitarEdicao() {
        if(!jTableConfigPortas.isEnabled()) {
            jTableConfigPortas.setEnabled(true);
            jButtonEditar.setText("Cancelar");
            jButtonSalvar.setEnabled(true);

            janelaPai.adicionarHistorico("Habilitando edição", EstadoSistema.OK);
        }
        else {
            jTableConfigPortas.editingCanceled(null);
            jTableConfigPortas.clearSelection();
            jTableConfigPortas.setEnabled(false);
            jButtonEditar.setText("Editar");
            jButtonSalvar.setEnabled(false);

            // Recarrega arquivo, cancelando qualquer alteração
            atualizarTabelaConfigPortas();

            janelaPai.adicionarHistorico("Cancelando edição", EstadoSistema.OK);
        }
    }

    /**
     * Declaração dos meus atributos.
     */
    JanelaServidor janelaPai;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonEditar;
    private javax.swing.JButton jButtonFechar;
    private javax.swing.JButton jButtonSalvar;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableConfigPortas;
    // End of variables declaration//GEN-END:variables

}
